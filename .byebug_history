c
a  = payments.last
a  = payments.last.response
a  = unprocessed_payments.last.response
payment.response
response
a
a  = unprocessed_payments.last.public_send(method)
cunprocessed_payments
c
payment_method
unprocessed_payments.first
method
unprocessed_payments.count
unprocessed_payments
total.to_f
payment_total.to_f
total
payment_total
c
p 9 if states[:payment]
states[:payment]
c
p 9 if states[:payment]
states[:payment]
states
c
state
p 9 if states[:payment]
states[:payment]
states
c
states.each { |state| p state.name }
states[:payment]
states
c
n
        end_eval
            protected; attr_accessor #{event_transition_attribute.inspect}
        define_helper :instance, <<-end_eval, __FILE__, __LINE__ + 1
define_helper :instance
define_helper :instance, <<-end_eval, __FILE__, __LINE__ + 1
define_helper :instance, <<-end_eval, __FILE__, __LINE__ + 1; protected; attr_accessor #{event_transition_attribute.inspect}; end_eval
event_transition_attribute = attribute(:event_transition)
c
event = machine.read(object, :event, true)
machine.read(object, :event, true)
machine.read
machine
c
block
c
block
c
block
c
continue
block
name
Spree::Order.state_machine(name)
scope == :instance ? self.class : self
c
scope == :instance ? self.class : self
block.call((scope == :instance ? self.class : self)
block
@order.next
@order.temporary_address = !params[:save_user_address]
@order.update_from_params(params, permitted_checkout_attributes, request.headers.env)
c
n
c
checkout_steps
c
checkout_steps
c
checkout_steps
c
name
c
name
previous_states
options[:if]
previous_states
self.checkout_steps[name] = options
options
self.checkout_steps
checkout_steps
name
c
response.success
response.success? = false
response.success?
response.sucess?
response
c
record_response(response)
response.success?
response
response = payment_method.capture(amount,response_code,gateway_options)
gateway_options
amount
response_code
payment_method
response
